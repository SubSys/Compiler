module One exposing (..)


import Helm.Compiler.Sudo.Native



type Maybe a
    = Nothing
    | Just a

type Either a b
    = Left a
    | Right b

type User = Anonymous | Named String

type Visibility = All | Active | Completed





(+) : Int -> Int -> Int
(+) leftA rightA =
    Sudo.Helm.Native.plus leftA rightA

alpha x =
    let
        f1 x = x
        f2 x = x + x
        f3 y = x + y
    in
        (f3 x) + 1

