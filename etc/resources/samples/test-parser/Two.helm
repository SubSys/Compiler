module Two exposing (..)


import Helm.Compiler.Sudo.Native



type Maybe a
    = Nothing
    | Just a

type Either a b
    = Left a
    | Right b

type User = Anonymous | Named String

type Visibility = All | Active | Completed





(+) : Int -> Int -> Int
(+) leftA rightA =
    Sudo.Helm.Native.plus leftA rightA


(+) : Float -> Float -> Float
(+) leftA rightA =
    Sudo.Helm.Native.plus leftA rightA


(-) : Int -> Int -> Int
(-) leftA rightA =
    Sudo.Helm.Native.sub leftA rightA


(-) : Float -> Float -> Float
(-) leftA rightA =
    Sudo.Helm.Native.sub leftA rightA



(==) : Int -> Int -> Bool
(==) leftA rightA =
    Sudo.Helm.Native.isEqInt leftA rightA

(==) : Float -> Float -> Bool
(==) leftA rightA =
    Sudo.Helm.Native.isEqFloat leftA rightA

(==) : String -> String -> Bool
(==) leftA rightA =
    Sudo.Helm.Native.isEqString leftA rightA

(==) : Char -> Char -> Bool
(==) leftA rightA =
    Sudo.Helm.Native.isEqChar leftA rightA



plusA x y =
    x + y

alpha1 x =
    plusA x 1

alpha2 x =
    x + x

alpha3 x =
    alpha2 1


alpha4 x y =
    x + y

alpha5 x =
    alpha4 x 1


plusInt : Int -> Int -> Int
plusInt x y =
    x + y


fib n =
    if n == 0 then
        0
    else if n == 1 then
        1
    else
        (fib (n - 1)) + (fib (n - 2))


beta : Int
beta =
    fib 0

id x = x

delta1 z =
    let
        passA x y = x
        
        x : Int
        x = passA (0 + z) 0
        
        y : Int
        y = 1
    in
        x + y + z


delta2 z =
    let
        passB x y = x
        
        x : Int
        x = id 0
        
        y : Int
        y = 1
        
        passX x y = x
    in
        x + y


delta3 =
    let
        x = 1 + 1
        y = 2
    in
        x + y

typeTest =
    if True then
        Left "True"
    else
        Right "False"

x1 = True
x2 = True
x3 = True
x4 = True

gamma =
    if True then
        1
    else if False then
        2
    else if False then
        3
    else
        4


omega x y z =
    x y z

phi f x =
    f x


test = phi id

test2 = test 0




