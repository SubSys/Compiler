module Main exposing (..)

import Native.Core


delta : Int
delta =
    let
        x : Int
        x = 0
        
        y : Int
        y = 1
    in
        x + y


(+) : a -> a -> a
(+) left right =
    Native.Core.plus left right


map : (a -> b) -> List a -> List b
map f xs =
    Native.Core.map f xs


type Maybe a
   = Just a
   | Nothing

type Either a b
    = Left a
    | Right b


type Result error value
    = Err error
    | Ok value

type Visibility = All | Active | Completed

-- type IntList = Empty | Node Int IntList


alpha : Int
alpha =
    (1 + 2) + 3

beta : Int -> Int -> Int -> Int
beta x y z =
    x + y + z

gamma : Int -> Int
gamma z =
    beta 1 2 z

omega : Maybe String
omega =
    Just "Lorem"


