module Main exposing (..)

import Sudo.Helm.Native



type Either a b
    = Left a
    | Right b

type Maybe a
    = Nothing
    | Just a

type User = Anonymous | Named String

type Visibility = All | Active | Completed


(+) : Float -> Float -> Float
(+) left right =
    Sudo.Helm.Native.plus left right


(+) : Int -> Int -> Int
(+) left right =
    Sudo.Helm.Native.plus left right


(-) : Int -> Int -> Int
(-) left right =
    Sudo.Helm.Native.plus left right


(==) : Int -> Int -> Bool
(==) left right =
    Sudo.Helm.Native.plus left right


(==) : Float -> Float -> Bool
(==) left right =
    Sudo.Helm.Native.plus left right


alpha x y =
    x + y

beta x =
    alpha x 1


gamma =
    alpha 1



delta =
    alpha 1.0 2.0


phi x y =
    x == y


test =
    phi 0


