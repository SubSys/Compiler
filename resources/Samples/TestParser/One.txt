module Main exposing (..)

import Sudo.Helm.Native


type Either a b
    = Left a
    | Right b

type Maybe a
    = Nothing
    | Just a

type User = Anonymous | Named String

type Visibility = All | Active | Completed


(+) : Int -> Int -> Int
(+) left right =
    Sudo.Helm.Native.plus left right

(-) : Int -> Int -> Int
(-) left right =
    Sudo.Helm.Native.sub left right

(==) : Int -> Int -> Bool
(==) left right =
    Sudo.Helm.Native.isEq left right


alpha x =
    case x of
        Nothing -> 1
        Just 1  -> 0
        Just x  -> x


test1 =
    if True then
        Left "Lorem"
    else
        Right "Lorem"

id x = x

delta1 z =
    let
        id x y = x
        
        x : Int
        x = id (0 + z) 0
        
        y : Int
        y = 1
    in
        x + y + z

delta2 z =
    let
        id x y = x
        
        x : Int
        x = id (0 + z) 0
        
        y : Int
        y = 1
    in
        x + y


x1 = True
x2 = True
x3 = True
x4 = True

gamma =
    if True then
        1
    else if False then
        2
    else if False then
        3
    else
        4


omega x y z =
    x y z

phi f x =
    f x


test = phi id

test2 = test 0




